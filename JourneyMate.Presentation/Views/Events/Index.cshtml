@model EventsViewModel
@{
    ViewBag.Title = "Events Management";
}


    <style>
        :root {
            --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --success-gradient: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            --danger-gradient: linear-gradient(135deg, #fa709a 0%, #fee140 100%);
            --card-shadow: 0 10px 30px rgba(0,0,0,0.1);
            --hover-shadow: 0 20px 40px rgba(0,0,0,0.15);
        }

        body {
            color: white;
            min-height: 100vh;
            font-family: 'Inter', sans-serif;
        }

        .hero-section {
            background: var(--primary-gradient);
            color: white;
            padding: 2rem 0;
            margin-bottom: 2rem;
            border-radius: 0 0 20px 20px;
        }

        .search-filters {
            background: #7a6998;
            border-radius: 15px;
            padding: 1.5rem;
            box-shadow: var(--card-shadow);
            margin-bottom: 2rem;
            backdrop-filter: blur(10px);
        }

        .event-card {
            background: white;
            border-radius: 20px;
            overflow: hidden;
            box-shadow: var(--card-shadow);
            transition: all 0.3s ease;
            height: 100%;
            border: none;
        }

            .event-card:hover {
                transform: translateY(-10px);
                box-shadow: var(--hover-shadow);
            }

        .event-image {
            height: 220px;
            object-fit: cover;
            width: 100%;
            transition: transform 0.3s ease;
        }

        .event-card:hover .event-image {
            transform: scale(1.05);
        }

        .event-category {
            position: absolute;
            top: 10px;
            left: 10px;
            background: rgba(0,0,0,0.7);
            color: white;
            padding: 0.3rem 0.8rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 500;
        }

        .btn-gradient-success {
            background: var(--success-gradient);
            border: none;
            color: white;
            transition: all 0.3s ease;
        }

            .btn-gradient-success:hover {
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(79, 172, 254, 0.4);
                color: white;
            }

        .btn-gradient-danger {
            background: var(--danger-gradient);
            border: none;
            color: white;
            transition: all 0.3s ease;
        }

            .btn-gradient-danger:hover {
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(250, 112, 154, 0.4);
                color: white;
            }

        .pagination {
            justify-content: center;
            margin-top: 2rem;
        }

        .page-link {
            border-radius: 10px;
            margin: 0 2px;
            border: none;
            color: #667eea;
            transition: all 0.3s ease;
        }

            .page-link:hover {
                background: var(--primary-gradient);
                color: white;
                transform: translateY(-2px);
            }

        .page-item.active .page-link {
            background: var(--primary-gradient);
            border: none;
        }

        .alert {
            border-radius: 15px;
            border: none;
            animation: fadeInDown 0.5s ease;
        }

        .loading-spinner {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 9999;
        }

        .stats-card {
            background: white;
            border-radius: 15px;
            padding: 1rem;
            text-align: center;
            box-shadow: var(--card-shadow);
        }

        .filter-btn {
            border-radius: 25px;
            padding: 0.5rem 1.5rem;
            border: 2px solid #e0e0e0;
            background: white;
            transition: all 0.3s ease;
        }

            .filter-btn.active {
                background: var(--primary-gradient);
                color: white;
                border-color: transparent;
            }

        .search-box {
            border-radius: 25px;
            border: 2px solid #e0e0e0;
            padding: 0.7rem 1.5rem;
            transition: all 0.3s ease;
        }

            .search-box:focus {
                border-color: #667eea;
                box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
            }

        @@media (max-width: 768px) {
            .search-filters {
                padding: 1rem;
            }

            .event-card {
                margin-bottom: 1rem;
            }
        }
    </style>

    <!-- Loading Spinner -->
    <div class="loading-spinner">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>

    <!-- Hero Section -->
    <div class="hero-section">
        <div class="container">
            <div class="row align-items-center">
                <div class="col-md-8">
                    <h1 class="display-4 fw-bold mb-3 animate__animated animate__fadeInLeft">
                        <i class="fas fa-calendar-alt me-3"></i>Events Management
                    </h1>
                    <p class="lead animate__animated animate__fadeInLeft animate__delay-1s">
                        Manage and organize your events with ease
                    </p>
                </div>
                <div class="col-md-4 text-end">
                    <div class="stats-card animate__animated animate__fadeInRight">
                        <h3 class="text-primary">@Model.TotalEvents</h3>
                        <p class="mb-0">Total Events</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="container">
        <!-- Alert Messages -->
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                <i class="fas fa-check-circle me-2"></i>
                @TempData["SuccessMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        }

        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <i class="fas fa-exclamation-circle me-2"></i>
                @TempData["ErrorMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        }

        <!-- Search and Filter Section -->
        <div class="search-filters animate__animated animate__fadeInUp">
            <form method="get" action="@Url.Action("Index")" id="filterForm">
                <div class="row g-3">
                    <div class="col-md-4">
                        <div class="input-group">
                            <span class="input-group-text bg-transparent border-end-0">
                                <i class="fas fa-search "></i>
                            </span>
                            <input type="text" class="form-control search-box border-start-0"
                                   name="searchTerm" value="@Model.SearchTerm"
                                   placeholder="Search events..." id="searchInput">
                        </div>
                    </div>

                    <div class="col-md-3">
                        <select class="form-select search-box" name="category" id="categoryFilter">
                            <option value="">All Categories</option>
                            @if (Model.Categories != null)
                            {
                                @foreach (var category in Model.Categories)
                                {
                                    @if (Model.Category == category)
                                    {
                                        <option value="@category" selected>@category</option>
                                    }
                                    else
                                    {
                                        <option value="@category">@category</option>
                                    }
                                }
                            }
                        </select>
                    </div>

                    <div class="col-md-2">
                        <select class="form-select search-box" name="sortBy" id="sortBy">
                            @if (Model.SortBy == "date")
                            {
                                <option value="date" selected>Date</option>
                            }
                            else
                            {
                                <option value="date">Date</option>
                            }

                            @if (Model.SortBy == "title")
                            {
                                <option value="title" selected>Title</option>
                            }
                            else
                            {
                                <option value="title">Title</option>
                            }

                            @if (Model.SortBy == "category")
                            {
                                <option value="category" selected>Category</option>
                            }
                            else
                            {
                                <option value="category">Category</option>
                            }

                            @if (Model.SortBy == "location")
                            {
                                <option value="location" selected>Location</option>
                            }
                            else
                            {
                                <option value="location">Location</option>
                            }
                        </select>
                    </div>

                    <div class="col-md-2">
                        <select class="form-select search-box" name="sortOrder" id="sortOrder">
                            @if (Model.SortOrder == "asc")
                            {
                                <option value="asc" selected>Ascending</option>
                            }
                            else
                            {
                                <option value="asc">Ascending</option>
                            }

                            @if (Model.SortOrder == "desc")
                            {
                                <option value="desc" selected>Descending</option>
                            }
                            else
                            {
                                <option value="desc">Descending</option>
                            }
                        </select>
                    </div>

                    <div class="col-md-1">
                        <button type="button" class="btn btn-outline-secondary w-100" id="clearFilters">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>

                <input type="hidden" name="page" value="1" id="pageInput">
                <input type="hidden" name="pageSize" value="@Model.PageSize">
            </form>
        </div>

        <!-- Events Grid -->
        <div class="row" id="eventsContainer">
            @if (Model.Events != null && Model.Events.Any())
            {
                @foreach (var item in Model.Events)
                {
                    <div class="col-lg-4 col-md-6 mb-4 animate__animated animate__fadeInUp">
                        <div class="card event-card">
                            <div class="position-relative">
                                <img src="@item.Image" class="event-image" alt="@item.Title" loading="lazy">
                                <span class="event-category">@item.Category</span>
                            </div>

                            <div style="color:white" class="card-body d-flex flex-column">
                                <h5 class="card-title fw-bold mb-3">@item.Title</h5>

                                <div class="mb-3">
                                    <p class="card-text mb-2">
                                        <i class="fas fa-calendar-alt text-primary me-2"></i>
                                        <strong>Date:</strong> @(string.IsNullOrEmpty(item.Dates) ? item.Date : item.Dates)
                                    </p>
                                    <p class="card-text mb-2">
                                        <i class="fas fa-map-marker-alt text-danger me-2"></i>
                                        <strong>Location:</strong> @item.Location
                                    </p>
                                </div>

                                @if (!string.IsNullOrWhiteSpace(item.Description))
                                {
                                    <p class="card-text  mb-3" style="font-size: 0.9rem;color:gray;">
                                        @(item.Description.Length > 120 ? item.Description.Substring(0, 120) + "..." : item.Description)
                                    </p>
                                }

                                <div class="mt-auto">
                                    <div class="d-flex gap-2">
                                        <button class="btn btn-gradient-success flex-fill confirm-btn"
                                                data-event-id="@item.Id" data-event-title="@item.Title">
                                            <i class="fas fa-check me-2"></i>Confirm
                                        </button>
                                        <button class="btn btn-gradient-danger flex-fill delete-btn"
                                                data-event-id="@item.Id" data-event-title="@item.Title">
                                            <i class="fas fa-trash me-2"></i>Delete
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="col-12 text-center py-5">
                    <div class="animate__animated animate__fadeIn">
                        <i class="fas fa-calendar-times fa-5x text-muted mb-3"></i>
                        <h3 class="text-muted">No events found</h3>
                        <p class="text-muted">Try adjusting your search criteria</p>
                    </div>
                </div>
            }
        </div>

        <!-- Pagination -->
        @if (Model.TotalPages > 1)
        {
            <nav aria-label="Events pagination" class="animate__animated animate__fadeInUp">
                <ul class="pagination">
                    @if (Model.HasPreviousPage)
                    {
                        <li class="page-item">
                            <a class="page-link" href="javascript:void(0)" onclick="goToPage(@Model.PreviousPage)">
                                <i class="fas fa-chevron-left"></i>
                            </a>
                        </li>
                    }

                    @foreach (var pageNum in Model.GetPageNumbers())
                    {
                        <li class="page-item @(pageNum == Model.CurrentPage ? "active" : "")">
                            <a class="page-link" href="javascript:void(0)" onclick="goToPage(@pageNum)">
                                @pageNum
                            </a>
                        </li>
                    }

                    @if (Model.HasNextPage)
                    {
                        <li class="page-item">
                            <a class="page-link" href="javascript:void(0)" onclick="goToPage(@Model.NextPage)">
                                <i class="fas fa-chevron-right"></i>
                            </a>
                        </li>
                    }
                </ul>
            </nav>
        }
    </div>

    <!-- Confirmation Modal -->
    <div class="modal fade" id="confirmModal" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Action</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <p id="confirmMessage"></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="confirmAction">Confirm</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script>
        // Global variables
        let currentAction = null;
        let currentEventId = null;
        let currentEventTitle = null;

        // DOM Ready
        document.addEventListener('DOMContentLoaded', function() {
            initializeEventHandlers();
            autoSubmitFilters();
        });

        // Initialize all event handlers
        function initializeEventHandlers() {
            // Search input with debounce
            let searchTimeout;
            document.getElementById('searchInput').addEventListener('input', function() {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(() => {
                    submitForm();
                }, 500);
            });

            // Filter change handlers
            document.getElementById('categoryFilter').addEventListener('change', submitForm);
            document.getElementById('sortBy').addEventListener('change', submitForm);
            document.getElementById('sortOrder').addEventListener('change', submitForm);

            // Clear filters button
            document.getElementById('clearFilters').addEventListener('click', clearAllFilters);

            // Confirm buttons
            document.querySelectorAll('.confirm-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    showConfirmModal('confirm', this.dataset.eventId, this.dataset.eventTitle);
                });
            });

            // Delete buttons
            document.querySelectorAll('.delete-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    showConfirmModal('delete', this.dataset.eventId, this.dataset.eventTitle);
                });
            });

            // Modal confirm button
            document.getElementById('confirmAction').addEventListener('click', executeAction);
        }

        // Auto-submit filters when page loads
        function autoSubmitFilters() {
            const form = document.getElementById('filterForm');
            if (form) {
                // Check if there are any filter values set
                const hasFilters = document.getElementById('searchInput').value ||
                                 document.getElementById('categoryFilter').value ||
                                 document.getElementById('sortBy').value !== 'date' ||
                                 document.getElementById('sortOrder').value !== 'asc';

                if (hasFilters) {
                    // Form is already populated with server-side values, no need to submit
                }
            }
        }

        // Submit form function
        function submitForm() {
            document.getElementById('pageInput').value = 1; // Reset to first page
            document.getElementById('filterForm').submit();
        }

        // Clear all filters
        function clearAllFilters() {
            document.getElementById('searchInput').value = '';
            document.getElementById('categoryFilter').value = '';
            document.getElementById('sortBy').value = 'date';
            document.getElementById('sortOrder').value = 'asc';
            submitForm();
        }

        // Pagination function
        function goToPage(page) {
            document.getElementById('pageInput').value = page;
            document.getElementById('filterForm').submit();
        }

        // Show confirmation modal
        function showConfirmModal(action, eventId, eventTitle) {
            currentAction = action;
            currentEventId = eventId;
            currentEventTitle = eventTitle;

            const modal = new bootstrap.Modal(document.getElementById('confirmModal'));
            const message = document.getElementById('confirmMessage');

            if (action === 'delete') {
                message.innerHTML = `Are you sure you want to delete the event "<strong>${eventTitle}</strong>"? This action cannot be undone.`;
                document.getElementById('confirmAction').className = 'btn btn-danger';
                document.getElementById('confirmAction').innerHTML = '<i class="fas fa-trash me-2"></i>Delete';
            } else {
                message.innerHTML = `Are you sure you want to confirm the event "<strong>${eventTitle}</strong>"?`;
                document.getElementById('confirmAction').className = 'btn btn-success';
                document.getElementById('confirmAction').innerHTML = '<i class="fas fa-check me-2"></i>Confirm';
            }

            modal.show();
        }

        // Execute the confirmed action
        function executeAction() {
            if (!currentAction || !currentEventId) return;

            showLoading();

            const url = currentAction === 'delete' ?
                        '@Url.Action("DeleteEvent", "Events")' :
                        '@Url.Action("ConfirmEvent", "Events")';

            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                },
                body: `id=${currentEventId}`
            })
            .then(response => response.json())
            .then(data => {
                hideLoading();

                if (data.success) {
                    showAlert('success', data.message);
                    // Refresh the page after a short delay
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                } else {
                    showAlert('danger', data.message);
                }

                // Hide modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('confirmModal'));
                modal.hide();
            })
            .catch(error => {
                hideLoading();
                showAlert('danger', 'An error occurred while processing your request.');
                console.error('Error:', error);

                // Hide modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('confirmModal'));
                modal.hide();
            });
        }

        // Show loading spinner
        function showLoading() {
            document.querySelector('.loading-spinner').style.display = 'block';
        }

        // Hide loading spinner
        function hideLoading() {
            document.querySelector('.loading-spinner').style.display = 'none';
        }

        // Show alert message
        function showAlert(type, message) {
            const alertHtml = `
                <div class="alert alert-${type} alert-dismissible fade show animate__animated animate__fadeInDown" role="alert">
                    <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'} me-2"></i>
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;

            // Insert alert at the beginning of the container
            const container = document.querySelector('.container');
            const heroSection = document.querySelector('.hero-section');

            if (heroSection && heroSection.nextElementSibling) {
                heroSection.nextElementSibling.insertAdjacentHTML('afterbegin', alertHtml);
            } else {
                container.insertAdjacentHTML('afterbegin', alertHtml);
            }

            // Auto-dismiss after 5 seconds
            setTimeout(() => {
                const alert = document.querySelector('.alert');
                if (alert) {
                    const bsAlert = new bootstrap.Alert(alert);
                    bsAlert.close();
                }
            }, 5000);
        }

        // Handle form submission errors
        window.addEventListener('beforeunload', function() {
            hideLoading();
        });

        // Keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            // Ctrl + F to focus search
            if (e.ctrlKey && e.key === 'f') {
                e.preventDefault();
                document.getElementById('searchInput').focus();
            }

            // Escape to clear search
            if (e.key === 'Escape' && document.activeElement === document.getElementById('searchInput')) {
                clearAllFilters();
            }
        });

        // Smooth scrolling for pagination
        function smoothScrollToTop() {
            window.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
        }

        // Image error handling
        document.addEventListener('DOMContentLoaded', function() {
            const images = document.querySelectorAll('.event-image');
            images.forEach(img => {
                img.addEventListener('error', function() {
                    this.src = 'https://via.placeholder.com/400x220/667eea/ffffff?text=Event+Image';
                });
            });
        });

        // Infinite scroll (optional enhancement)
        let isLoading = false;
        function checkScroll() {
            if (isLoading) return;

            const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
            const windowHeight = window.innerHeight;
            const documentHeight = document.documentElement.scrollHeight;

            if (scrollTop + windowHeight >= documentHeight - 1000) {
                // Near bottom of page - could implement infinite scroll here
                // This is just a placeholder for future enhancement
            }
        }

        // Add scroll listener (commented out as it's not fully implemented)
        // window.addEventListener('scroll', throttle(checkScroll, 100));

        // Throttle function for performance
        function throttle(func, limit) {
            let inThrottle;
            return function() {
                const args = arguments;
                const context = this;
                if (!inThrottle) {
                    func.apply(context, args);
                    inThrottle = true;
                    setTimeout(() => inThrottle = false, limit);
                }
            }
        }
    </script>
