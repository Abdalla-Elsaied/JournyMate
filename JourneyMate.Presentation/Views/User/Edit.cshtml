@model UserVm

@{
    ViewData["Title"] = "Edit User - JourneyMate";
}

<style>
    @@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Inter', sans-serif;
        /* background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%); */
        min-height: 100vh;
        color: #333;
        position: relative;
        overflow-x: hidden;
    }

        body::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            /* background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grid" width="20" height="20" patternUnits="userSpaceOnUse"><path d="M 20 0 L 0 0 0 20" fill="none" stroke="rgba(255,255,255,0.05)" stroke-width="1"/></pattern></defs><rect width="100" height="100" fill="url(%23grid)"/></svg>'); */
            pointer-events: none;
        }

    .edit-container {
        max-width: 800px;
        margin: 2rem auto;
        padding: 0 1rem;
        position: relative;
        z-index: 1;
    }

    .edit-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 2.5rem 2rem;
        border-radius: 20px 20px 0 0;
        position: relative;
        overflow: hidden;
    }

        .edit-header::before {
            content: '';
            position: absolute;
            top: -50%;
            right: -50%;
            width: 200px;
            height: 200px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            animation: float 6s ease-in-out infinite;
        }

        .edit-header::after {
            content: '';
            position: absolute;
            bottom: -30%;
            left: -30%;
            width: 150px;
            height: 150px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 50%;
            animation: float 8s ease-in-out infinite reverse;
        }

    @@keyframes float {
        0%, 100%

    {
        transform: translateY(0px);
    }

    50% {
        transform: translateY(-20px);
    }

    }

    .header-content {
        position: relative;
        z-index: 2;
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .edit-icon {
        width: 60px;
        height: 60px;
        background: rgba(255, 255, 255, 0.2);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        backdrop-filter: blur(10px);
        border: 2px solid rgba(255, 255, 255, 0.3);
    }

    .header-text h1 {
        font-size: 2.2rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
        letter-spacing: -0.5px;
    }

    .header-text p {
        font-size: 1rem;
        opacity: 0.9;
        font-weight: 400;
    }

    .edit-form-container {
        background: white;
        border-radius: 0 0 20px 20px;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        overflow: hidden;
    }

    .form-content {
        padding: 2.5rem;
    }

    .validation-summary {
        background: linear-gradient(135deg, #fee2e2, #fecaca);
        border: 1px solid #f87171;
        border-radius: 12px;
        padding: 1.5rem;
        margin-bottom: 2rem;
        position: relative;
        overflow: hidden;
    }

        .validation-summary::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 4px;
            height: 100%;
            background: #ef4444;
        }

        .validation-summary h4 {
            color: #dc2626;
            font-size: 1.1rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .validation-summary ul {
            margin: 0;
            padding-left: 1.5rem;
            color: #dc2626;
        }

        .validation-summary li {
            margin-bottom: 0.25rem;
            font-size: 0.9rem;
        }

    .form-section {
        margin-bottom: 2rem;
    }

    .section-title {
        font-size: 1.3rem;
        font-weight: 600;
        color: #1f2937;
        margin-bottom: 1.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding-bottom: 0.5rem;
        border-bottom: 2px solid #e5e7eb;
    }

    .form-group {
        margin-bottom: 1.5rem;
        position: relative;
    }

    .form-label {
        display: block;
        font-weight: 500;
        color: #374151;
        margin-bottom: 0.5rem;
        font-size: 0.95rem;
    }

    .form-control {
        width: 100%;
        padding: 1rem;
        border: 2px solid #e5e7eb;
        border-radius: 12px;
        font-size: 1rem;
        transition: all 0.3s ease;
        background: #ffffff;
        color: #1f2937;
        position: relative;
    }

        .form-control:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            transform: translateY(-2px);
        }

        .form-control:hover {
            border-color: #cbd5e1;
        }

        .form-control::placeholder {
            color: #9ca3af;
        }

    .input-icon {
        position: absolute;
        left: 12px;
        top: 50%;
        transform: translateY(-50%);
        width: 20px;
        height: 20px;
        color: #6b7280;
        pointer-events: none;
    }

    .form-control.with-icon {
        padding-left: 45px;
    }

    .text-danger {
        color: #ef4444;
        font-size: 0.85rem;
        margin-top: 0.25rem;
        display: block;
        font-weight: 500;
    }

    .roles-container {
        background: #f8fafc;
        border: 2px solid #e2e8f0;
        border-radius: 12px;
        padding: 1.5rem;
        margin-bottom: 1.5rem;
    }

    .roles-title {
        font-size: 1.1rem;
        font-weight: 600;
        color: #475569;
        margin-bottom: 1rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .roles-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
    }

    .role-item {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        padding: 0.75rem;
        background: white;
        border: 1px solid #e2e8f0;
        border-radius: 8px;
        transition: all 0.2s ease;
        cursor: pointer;
    }

        .role-item:hover {
            background: #f1f5f9;
            border-color: #667eea;
        }

    .role-checkbox {
        width: 18px;
        height: 18px;
        border: 2px solid #d1d5db;
        border-radius: 4px;
        position: relative;
        transition: all 0.2s ease;
    }

        .role-checkbox input {
            position: absolute;
            opacity: 0;
            cursor: pointer;
        }

            .role-checkbox input:checked + .checkmark {
                background: #667eea;
                border-color: #667eea;
            }

        .role-checkbox .checkmark {
            width: 100%;
            height: 100%;
            border-radius: 4px;
            position: relative;
            transition: all 0.2s ease;
        }

            .role-checkbox .checkmark::after {
                content: '';
                position: absolute;
                left: 5px;
                top: 1px;
                width: 4px;
                height: 8px;
                border: solid white;
                border-width: 0 2px 2px 0;
                transform: rotate(45deg);
                opacity: 0;
                transition: opacity 0.2s ease;
            }

        .role-checkbox input:checked + .checkmark::after {
            opacity: 1;
        }

    .role-label {
        font-weight: 500;
        color: #374151;
        cursor: pointer;
    }

    .form-actions {
        background: #f9fafb;
        padding: 2rem;
        border-top: 1px solid #e5e7eb;
        display: flex;
        gap: 1rem;
        justify-content: center;
        flex-wrap: wrap;
    }

    .action-btn {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 1rem 2rem;
        border-radius: 12px;
        text-decoration: none;
        font-weight: 600;
        font-size: 1rem;
        transition: all 0.3s ease;
        border: none;
        cursor: pointer;
        position: relative;
        overflow: hidden;
        min-width: 140px;
        justify-content: center;
    }

    .btn-primary {
        background: linear-gradient(135deg, #667eea, #764ba2);
        color: white;
        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
    }

        .btn-primary::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: left 0.5s ease;
        }

        .btn-primary:hover::before {
            left: 100%;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.6);
        }

    .btn-secondary {
        background: white;
        color: #475569;
        border: 2px solid #e2e8f0;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

        .btn-secondary:hover {
            background: #f8fafc;
            border-color: #cbd5e1;
            transform: translateY(-2px);
            color: #334155;
        }

    .btn-icon {
        width: 18px;
        height: 18px;
    }

    .loading-btn {
        position: relative;
        pointer-events: none;
        opacity: 0.7;
    }

        .loading-btn::after {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 20px;
            height: 20px;
            margin: -10px 0 0 -10px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-top: 2px solid white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

    @@keyframes spin {
        0%

    {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }

    }

    .progress-bar {
        position: fixed;
        top: 0;
        left: 0;
        width: 0%;
        height: 3px;
        background: linear-gradient(90deg, #667eea, #764ba2);
        z-index: 1000;
        transition: width 0.3s ease;
    }

    @@media (max-width: 768px) {
        .edit-container

    {
        margin: 1rem auto;
        padding: 0 0.5rem;
    }

    .edit-header {
        padding: 2rem 1.5rem;
        border-radius: 16px 16px 0 0;
    }

    .header-content {
        flex-direction: column;
        text-align: center;
        gap: 1.5rem;
    }

    .header-text h1 {
        font-size: 1.8rem;
    }

    .form-content {
        padding: 2rem 1.5rem;
    }

    .form-actions {
        padding: 1.5rem;
        flex-direction: column;
    }

    .action-btn {
        width: 100%;
    }

    .edit-form-container {
        border-radius: 0 0 16px 16px;
    }

    .roles-grid {
        grid-template-columns: 1fr;
    }

    }

    .fade-in {
        animation: fadeIn 0.5s ease-in;
    }

    @@keyframes fadeIn {
        from

    {
        opacity: 0;
        transform: translateY(20px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }
</style>

<div class="progress-bar" id="progressBar"></div>

<div class="edit-container fade-in">
    <div class="edit-header">
        <div class="header-content">
            <div class="edit-icon">
                <svg width="28" height="28" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                </svg>
            </div>
            <div class="header-text">
                <h1>Edit User</h1>
                <p>Update user information and manage account settings</p>
            </div>
        </div>
    </div>

    <div class="edit-form-container">
        <form asp-action="Edit" method="post" id="editForm">
            <div class="form-content">
                <!-- Validation Summary -->
                @if (!ViewData.ModelState.IsValid)
                {
                    <div class="validation-summary">
                        <h4>
                            <svg width="20" height="20" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z" />
                            </svg>
                            Please correct the following errors:
                        </h4>
                        <div asp-validation-summary="All"></div>
                    </div>
                }

                <!-- Personal Information Section -->
                <div class="form-section">
                    <h3 class="section-title">
                        <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                        </svg>
                        Personal Information
                    </h3>


                    <div class="form-group">
                        <label asp-for="Email" class="form-label">Email Address</label>
                        <div style="position: relative;">
                            <svg class="input-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                            </svg>
                            <input readonly asp-for="Email" type="email" class="form-control with-icon" placeholder="Enter email address" autocomplete="email" />
                        </div>
                        <span asp-validation-for="Email" class="text-danger"></span>
                    </div>

                    <div class="form-group">
                        <label asp-for="FullName" class="form-label">Full Name</label>
                        <div style="position: relative;">
                            <svg class="input-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                            </svg>
                            <input asp-for="FullName" class="form-control with-icon" placeholder="Enter full name" autocomplete="name" />
                        </div>
                        <span asp-validation-for="FullName" class="text-danger"></span>
                    </div>

                    <div class="form-group">
                        <label asp-for="PhoneNumber" class="form-label">Phone Number</label>
                        <div style="position: relative;">
                            <svg class="input-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
                            </svg>
                            <input asp-for="PhoneNumber" type="tel" class="form-control with-icon" placeholder="Enter phone number" autocomplete="tel" />
                        </div>
                        <span asp-validation-for="PhoneNumber" class="text-danger"></span>
                    </div>
                </div>

                <!-- Roles Section -->
                @if (ViewData["Roles"] != null)
                {
                    <div class="form-section">
                        <h3 class="section-title">
                            <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
                            </svg>
                            Account Roles
                        </h3>

                        <div class="roles-container">
                            <div class="roles-title">
                                <svg width="18" height="18" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                                </svg>
                                Select User Roles
                            </div>
                            <div class="roles-grid">
                                @foreach (var role in ViewData["Roles"] as List<SelectListItem>)
                                {
                                    <div class="role-item">
                                        <label class="role-checkbox">
                                            <input type="checkbox" name="SelectedRoles" value="@role.Value"
                                            @(Model.Roles != null && Model.Roles.Contains(role.Value) ? "checked" : "") />
                                            <span class="checkmark"></span>
                                        </label>
                                        <span class="role-label">@role.Text</span>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }

                <!-- Hidden field for ID -->
                <input asp-for="Id" type="hidden" />
            </div>

            <!-- Form Actions -->
            <div class="form-actions">
                <button type="submit" class="action-btn btn-primary" id="saveBtn">
                    <svg class="btn-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                    </svg>
                    <span>Save Changes</span>
                </button>
                <a asp-action="Index" class="action-btn btn-secondary">
                    <svg class="btn-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                    </svg>
                    <span>Cancel</span>
                </a>
            </div>
        </form>
    </div>
</div>

<script>
    // Form submission with loading state
    document.getElementById('editForm').addEventListener('submit', function(e) {
        const saveBtn = document.getElementById('saveBtn');
        const progressBar = document.getElementById('progressBar');

        saveBtn.classList.add('loading-btn');
        saveBtn.querySelector('span').textContent = 'Saving...';
        saveBtn.disabled = true;

        // Simulate progress
        let progress = 0;
        const interval = setInterval(() => {
            progress += 10;
            progressBar.style.width = progress + '%';
            if (progress >= 90) {
                clearInterval(interval);
            }
        }, 100);
    });

    // Auto-save draft functionality (optional)
    let autoSaveTimeout;
    const formInputs = document.querySelectorAll('input[type="text"], input[type="email"], input[type="tel"]');

    formInputs.forEach(input => {
        input.addEventListener('input', function() {
            clearTimeout(autoSaveTimeout);
            autoSaveTimeout = setTimeout(() => {
                // You can implement auto-save to local storage here
                console.log('Auto-saving draft...');
            }, 2000);
        });
    });

    // Enhanced form validation feedback
    document.querySelectorAll('.form-control').forEach(input => {
        input.addEventListener('blur', function() {
            if (this.value.trim() === '') {
                this.style.borderColor = '#ef4444';
            } else {
                this.style.borderColor = '#10b981';
            }
        });

        input.addEventListener('focus', function() {
            this.style.borderColor = '#667eea';
        });
    });

    // Role selection feedback
    document.querySelectorAll('input[name="SelectedRoles"]').forEach(checkbox => {
        checkbox.addEventListener('change', function() {
            const roleItem = this.closest('.role-item');
            if (this.checked) {
                roleItem.style.background = '#f0f9ff';
                roleItem.style.borderColor = '#667eea';
            } else {
                roleItem.style.background = 'white';
                roleItem.style.borderColor = '#e2e8f0';
            }
        });
    });

    // Initialize role states
    document.addEventListener('DOMContentLoaded', function() {
        document.querySelectorAll('input[name="SelectedRoles"]:checked').forEach(checkbox => {
            const roleItem = checkbox.closest('.role-item');
            roleItem.style.background = '#f0f9ff';
            roleItem.style.borderColor = '#667eea';
        });

        // Focus first input
        document.querySelector('input[name="FullName"]').focus();
    });

    // Prevent accidental navigation away from unsaved changes
    let formChanged = false;
    document.querySelectorAll('input, select, textarea').forEach(element => {
        element.addEventListener('change', () => {
            formChanged = true;
        });
    });

    window.addEventListener('beforeunload', function(e) {
        if (formChanged) {
            e.preventDefault();
            e.returnValue = '';
        }
    });

    // Remove beforeunload when form is submitted
    document.getElementById('editForm').addEventListener('submit', function() {
        formChanged = false;
    });
</script>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}