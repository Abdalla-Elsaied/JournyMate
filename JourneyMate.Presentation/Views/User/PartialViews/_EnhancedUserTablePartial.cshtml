@model IEnumerable<UserVm>

    @if (Model.Any())
    {
        <div class="table-responsive">
            <table class="table enhanced-table">
                <thead>
                    <tr>
                        <th><i class="fas fa-hashtag me-2"></i>ID</th>
                        <th><i class="fas fa-user me-2"></i>Full Name</th>
                        <th><i class="fas fa-envelope me-2"></i>Email</th>
                        <th><i class="fas fa-phone me-2"></i>Phone</th>
                        <th><i class="fas fa-user-tag me-2"></i>Roles</th>
                        <th><i class="fas fa-cog me-2"></i>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in Model)
                    {
                        <tr class="user-row" data-user-id="@user.Id">
                            <td>
                                <span class="user-id">@(user.Id?.Length > 8 ? user.Id.Substring(0, 8) + "..." : user.Id)</span>
                            </td>
                            <td>
                                <div class="user-info">
                                    <div class="user-avatar">
                                        @(GetUserInitial(user.FullName))
                                    </div>
                                    <div class="user-details">
                                        <span class="user-name">@(user.FullName ?? "N/A")</span>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <span class="user-email">@(user.Email ?? "N/A")</span>
                            </td>
                            <td>
                                <span class="user-phone">@(user.PhoneNumber ?? "N/A")</span>
                            </td>
                            <td>
                                <div class="roles-container">
                                    @if (user.Roles != null && user.Roles.Any())
                                    {
                                        @foreach (var role in user.Roles)
                                        {
                                            <span class="role-badge role-@role.ToLower()">@role</span>
                                        }
                                    }
                                    else
                                    {
                                        <span class="role-badge role-user">User</span>
                                    }
                                </div>
                            </td>
                            <td>
                                <div class="action-buttons">
                                    <a asp-controller="User" asp-action="Details" asp-route-id="@user.Id"
                                       class="btn-action btn-view" data-bs-toggle="tooltip" title="View Details">
                                        <i class="fas fa-eye"></i>
                                    </a>
                                    <a asp-controller="User" asp-action="Edit" asp-route-id="@user.Id"
                                       class="btn-action btn-edit" data-bs-toggle="tooltip" title="Edit User">
                                        <i class="fas fa-edit"></i>
                                    </a>
                                    <button class="btn-action btn-delete" data-user-id="@user.Id" data-user-name="@user.FullName"
                                            data-bs-toggle="tooltip" title="Delete User">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <div class="empty-state">
            <div class="empty-state-icon">
                <i class="fas fa-users"></i>
            </div>
            <h3>No Users Found</h3>
            <p>There are no users in this category yet.</p>
            <a asp-controller="Account" asp-action="SignUp" class="btn btn-primary">
                <i class="fas fa-user-plus me-2"></i>Add New User
            </a>
        </div>
    }

    @functions {
        private string GetUserInitial(string fullName)
        {
            if (string.IsNullOrWhiteSpace(fullName))
            {
                return "?";
            }

            var trimmed = fullName.Trim();
            return trimmed.Length > 0 ? trimmed[0].ToString().ToUpper() : "?";
        }
    }
<style>
    /* Empty State Styling */
    .empty-state {
        text-align: center;
        padding: 4rem 2rem;
        color: var(--text-muted);
    }

    .empty-state-icon {
        font-size: 4rem;
        margin-bottom: 1.5rem;
        opacity: 0.5;
    }

    .empty-state h3 {
        color: var(--text-light);
        margin-bottom: 1rem;
        font-weight: 600;
    }

    .empty-state p {
        margin-bottom: 2rem;
        font-size: 1.1rem;
    }

    /* Enhanced table styles specific to partial */
    .enhanced-table {
        margin-bottom: 0 !important;
    }

        .enhanced-table thead th {
            background: var(--darker-bg) !important;
            color: var(--text-muted) !important;
            font-weight: 600 !important;
            text-transform: uppercase !important;
            font-size: 0.8rem !important;
            letter-spacing: 0.05em !important;
            border: none !important;
            padding: 1rem !important;
        }

    .user-row {
        transition: all 0.3s ease;
        border-bottom: 1px solid var(--border-color) !important;
    }

        .user-row:hover {
            background: rgba(99, 102, 241, 0.05) !important;
            transform: translateX(4px);
        }

    .user-info {
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .user-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: 600;
        font-size: 1rem;
        text-transform: uppercase;
    }

    .user-name {
        font-weight: 600;
        color: var(--text-light);
    }

    .user-email {
        color: var(--text-muted);
    }

    .user-phone {
        color: var(--text-muted);
    }

    .user-id {
        font-family: 'Courier New', monospace;
        color: var(--text-muted);
        font-size: 0.9rem;
        background: var(--darker-bg);
        padding: 0.25rem 0.5rem;
        border-radius: 0.25rem;
    }

    /* Role Badges */
    .roles-container {
        display: flex;
        gap: 0.25rem;
        flex-wrap: wrap;
    }

    .role-badge {
        padding: 0.25rem 0.75rem;
        border-radius: 1rem;
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    .role-admin, .role-super {
        background: rgba(239, 68, 68, 0.1);
        color: var(--danger-color);
        border: 1px solid rgba(239, 68, 68, 0.2);
    }

    .role-company {
        background: rgba(16, 185, 129, 0.1);
        color: var(--success-color);
        border: 1px solid rgba(16, 185, 129, 0.2);
    }

    .role-user {
        background: rgba(6, 182, 212, 0.1);
        color: var(--accent-color);
        border: 1px solid rgba(6, 182, 212, 0.2);
    }

    /* Action Buttons */
    .action-buttons {
        display: flex;
        gap: 0.5rem;
        opacity: 0.7;
        transition: opacity 0.3s ease;
    }

    .user-row:hover .action-buttons {
        opacity: 1;
    }

    .btn-action {
        width: 35px;
        height: 35px;
        border-radius: 0.5rem;
        border: none;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s ease;
        cursor: pointer;
        text-decoration: none;
    }

    .btn-view {
        background: rgba(6, 182, 212, 0.1);
        color: var(--accent-color);
    }

        .btn-view:hover {
            background: var(--accent-color);
            color: white;
            transform: scale(1.1);
        }

    .btn-edit {
        background: rgba(245, 158, 11, 0.1);
        color: var(--warning-color);
    }

        .btn-edit:hover {
            background: var(--warning-color);
            color: white;
            transform: scale(1.1);
        }

    .btn-delete {
        background: rgba(239, 68, 68, 0.1);
        color: var(--danger-color);
    }

        .btn-delete:hover {
            background: var(--danger-color);
            color: white;
            transform: scale(1.1);
        }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .user-info

    {
        flex-direction: column;
        align-items: flex-start;
        gap: 0.25rem;
    }

    .user-avatar {
        width: 30px;
        height: 30px;
        font-size: 0.8rem;
    }

    .action-buttons {
        flex-direction: column;
        gap: 0.25rem;
    }

    .btn-action {
        width: 30px;
        height: 30px;
    }

    .role-badge {
        font-size: 0.7rem;
        padding: 0.2rem 0.5rem;
    }

    }
</style>

<script>
    $(document).ready(function() {
        // Initialize tooltips for this partial
        $('[data-bs-toggle="tooltip"]').tooltip();

        // Handle delete button clicks
        $('.btn-delete').on('click', function(e) {
            e.preventDefault();
            var userId = $(this).data('user-id');
            var userName = $(this).data('user-name');

            // Show confirmation dialog
            if (confirm('Are you sure you want to delete user: ' + userName + '?\n\nThis action cannot be undone.')) {
                // Create a form and submit it for deletion
                var form = $('<form>', {
                    'method': 'POST',
                    'action': '/User/Delete/' + userId
                });

                // Add anti-forgery token if available
                var token = $('input[name="__RequestVerificationToken"]').val();
                if (token) {
                    form.append($('<input>', {
                        'type': 'hidden',
                        'name': '__RequestVerificationToken',
                        'value': token
                    }));
                }

                // Add to body and submit
                $('body').append(form);
                form.submit();
            }
        });

        // Add loading states to action buttons
        $('.btn-action').on('click', function() {
            if (!$(this).hasClass('btn-delete')) {
                $(this).addClass('loading');
                var originalIcon = $(this).find('i').attr('class');
                $(this).find('i').attr('class', 'fas fa-spinner fa-spin');

                // Reset after 2 seconds (in case navigation fails)
                setTimeout(() => {
                    $(this).removeClass('loading');
                    $(this).find('i').attr('class', originalIcon);
                }, 2000);
            }
        });
    });
</script>